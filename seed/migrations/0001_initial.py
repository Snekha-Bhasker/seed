# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2017-05-30 15:47
from __future__ import unicode_literals

import autoslug.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import django_pgjson.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('data_importer', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('orgs', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AttributeOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('value_source', models.IntegerField(choices=[(0, b'Assessed Raw'), (2, b'Assessed'), (1, b'Portfolio Raw'), (3, b'Portfolio'), (4, b'BuildingSnapshot'), (5, b'Green Button Raw')])),
            ],
        ),
        migrations.CreateModel(
            name='BuildingAttributeVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='BuildingSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('tax_lot_id', models.CharField(blank=True, db_index=True, max_length=128, null=True)),
                ('pm_property_id', models.CharField(blank=True, db_index=True, max_length=128, null=True)),
                ('custom_id_1', models.CharField(blank=True, db_index=True, max_length=128, null=True)),
                ('lot_number', models.CharField(blank=True, max_length=128, null=True)),
                ('block_number', models.CharField(blank=True, max_length=128, null=True)),
                ('property_notes', models.TextField(blank=True, null=True)),
                ('year_ending', models.DateField(blank=True, null=True)),
                ('district', models.CharField(blank=True, max_length=128, null=True)),
                ('owner', models.CharField(blank=True, max_length=128, null=True)),
                ('owner_email', models.CharField(blank=True, max_length=128, null=True)),
                ('owner_telephone', models.CharField(blank=True, max_length=128, null=True)),
                ('owner_address', models.CharField(blank=True, max_length=128, null=True)),
                ('owner_city_state', models.CharField(blank=True, max_length=128, null=True)),
                ('owner_postal_code', models.CharField(blank=True, max_length=128, null=True)),
                ('property_name', models.CharField(blank=True, max_length=255, null=True)),
                ('building_count', models.IntegerField(blank=True, null=True)),
                ('gross_floor_area', models.FloatField(blank=True, null=True)),
                ('address_line_1', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('address_line_2', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=255, null=True)),
                ('year_built', models.IntegerField(blank=True, null=True)),
                ('recent_sale_date', models.DateTimeField(blank=True, null=True)),
                ('energy_score', models.IntegerField(blank=True, null=True)),
                ('site_eui', models.FloatField(blank=True, null=True)),
                ('generation_date', models.DateTimeField(blank=True, null=True)),
                ('release_date', models.DateTimeField(blank=True, null=True)),
                ('state_province', models.CharField(blank=True, max_length=255, null=True)),
                ('site_eui_weather_normalized', models.FloatField(blank=True, null=True)),
                ('source_eui', models.FloatField(blank=True, null=True)),
                ('source_eui_weather_normalized', models.FloatField(blank=True, null=True)),
                ('energy_alerts', models.TextField(blank=True, null=True)),
                ('space_alerts', models.TextField(blank=True, null=True)),
                ('building_certification', models.CharField(blank=True, max_length=255, null=True)),
                ('conditioned_floor_area', models.FloatField(blank=True, null=True)),
                ('occupied_floor_area', models.FloatField(blank=True, null=True)),
                ('use_description', models.TextField(blank=True, null=True)),
                ('best_guess_confidence', models.FloatField(blank=True, null=True)),
                ('match_type', models.IntegerField(blank=True, choices=[(1, b'System Match'), (2, b'User Match'), (3, b'Possible Match')], db_index=True, null=True)),
                ('confidence', models.FloatField(blank=True, db_index=True, null=True)),
                ('source_type', models.IntegerField(blank=True, choices=[(0, b'Assessed Raw'), (2, b'Assessed'), (1, b'Portfolio Raw'), (3, b'Portfolio'), (4, b'BuildingSnapshot'), (5, b'Green Button Raw')], db_index=True, null=True)),
                ('extra_data', django_pgjson.fields.JsonField(default={})),
                ('extra_data_sources', django_pgjson.fields.JsonField(default={})),
                ('address_line_1_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot')),
                ('address_line_2_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot')),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'abstract': False,
                'get_latest_by': 'modified',
            },
        ),
        migrations.CreateModel(
            name='CanonicalBuilding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('canonical_snapshot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='seed.BuildingSnapshot')),
            ],
        ),
        migrations.CreateModel(
            name='Column',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(db_index=True, max_length=512)),
                ('table_name', models.CharField(blank=True, db_index=True, max_length=512)),
                ('is_extra_data', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ColumnMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_type', models.IntegerField(blank=True, choices=[(0, b'Assessed Raw'), (2, b'Assessed'), (1, b'Portfolio Raw'), (3, b'Portfolio'), (4, b'BuildingSnapshot'), (5, b'Green Button Raw')], null=True)),
                ('column_mapped', models.ManyToManyField(blank=True, related_name='mapped_mappings', to='seed.Column')),
                ('column_raw', models.ManyToManyField(blank=True, related_name='raw_mappings', to='seed.Column')),
                ('super_organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='column_mappings', to='orgs.Organization', verbose_name='SeedOrg')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Compliance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('compliance_type', models.CharField(choices=[(b'Benchmarking', 'Benchmarking'), (b'Auditing', 'Auditing'), (b'Retro Commissioning', 'Retro Commissioning')], default=b'Benchmarking', max_length=30, verbose_name='compliance_type')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='start_date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end_date')),
                ('deadline_date', models.DateField(blank=True, null=True, verbose_name='deadline_date')),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'abstract': False,
                'get_latest_by': 'modified',
            },
        ),
        migrations.CreateModel(
            name='CustomBuildingHeaders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('building_headers', django_pgjson.fields.JsonField(default={})),
                ('super_organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='custom_headers', to='orgs.Organization', verbose_name='SeedOrg')),
            ],
        ),
        migrations.CreateModel(
            name='Cycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='orgs.Organization')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='DataQualityCheck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=b'Default Data Quality Check', max_length=255)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orgs.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='Enum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enum_name', models.CharField(db_index=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='EnumValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Meter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('energy_type', models.IntegerField(choices=[(1, b'Natural Gas'), (2, b'Electricity'), (3, b'Fuel Oil'), (4, b'Fuel Oil No. 1'), (5, b'Fuel Oil No. 2'), (6, b'Fuel Oil No. 4'), (7, b'Fuel Oil No. 5 and No. 6'), (8, b'District Steam'), (9, b'District Hot Water'), (10, b'District Chilled Water'), (11, b'Propane'), (12, b'Liquid Propane'), (13, b'Kerosene'), (14, b'Diesel'), (15, b'Coal'), (16, b'Coal Anthracite'), (17, b'Coal Bituminous'), (18, b'Coke'), (19, b'Wood'), (20, b'Other')])),
                ('energy_units', models.IntegerField(choices=[(1, b'kWh'), (2, b'Therms'), (3, b'Wh')])),
                ('building_snapshot', models.ManyToManyField(blank=True, related_name='meters', to='seed.BuildingSnapshot')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', autoslug.fields.AutoSlugField(editable=True, populate_from=b'name', unique=True, verbose_name='slug')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'abstract': False,
                'get_latest_by': 'modified',
            },
        ),
        migrations.CreateModel(
            name='ProjectBuilding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('compliant', models.NullBooleanField()),
                ('approved_date', models.DateField(blank=True, null=True, verbose_name='approved_date')),
            ],
            options={
                'ordering': ['project', 'building_snapshot'],
                'verbose_name': 'project building',
                'verbose_name_plural': 'project buildings',
            },
        ),
        migrations.CreateModel(
            name='ProjectPropertyView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('compliant', models.NullBooleanField()),
                ('approved_date', models.DateField(blank=True, null=True, verbose_name='approved_date')),
                ('approver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_property_views', to='seed.Project')),
            ],
            options={
                'ordering': ['project', 'property_view'],
                'verbose_name': 'project property view',
                'verbose_name_plural': 'project property views',
            },
        ),
        migrations.CreateModel(
            name='ProjectTaxLotView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('compliant', models.NullBooleanField()),
                ('approved_date', models.DateField(blank=True, null=True, verbose_name='approved_date')),
                ('approver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_taxlot_views', to='seed.Project')),
            ],
            options={
                'ordering': ['project', 'taxlot_view'],
                'verbose_name': 'project taxlot view',
                'verbose_name_plural': 'project taxlot views',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('campus', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'properties',
            },
        ),
        migrations.CreateModel(
            name='PropertyAuditLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('import_filename', models.CharField(blank=True, max_length=255, null=True)),
                ('record_type', models.IntegerField(blank=True, choices=[(0, 'ImportFile'), (1, 'UserEdit')], null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orgs.Organization')),
                ('parent1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='propertyauditlog__parent1', to='seed.PropertyAuditLog')),
                ('parent2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='propertyauditlog__parent2', to='seed.PropertyAuditLog')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_type', models.IntegerField(blank=True, db_index=True, null=True)),
                ('data_state', models.IntegerField(choices=[(0, b'Unknown'), (1, b'Post Import'), (2, b'Post Mapping'), (3, b'Post Matching'), (4, b'Flagged for Deletion')], default=0)),
                ('merge_state', models.IntegerField(choices=[(0, b'Unknown'), (1, b'New Record'), (2, b'Merged Record'), (3, b'Duplicate Record'), (4, b'Delete Record')], default=0, null=True)),
                ('confidence', models.FloatField(blank=True, default=0, null=True)),
                ('jurisdiction_property_id', models.CharField(blank=True, max_length=255, null=True)),
                ('custom_id_1', models.CharField(blank=True, max_length=255, null=True)),
                ('pm_parent_property_id', models.CharField(blank=True, max_length=255, null=True)),
                ('pm_property_id', models.CharField(blank=True, max_length=255, null=True)),
                ('home_energy_score_id', models.CharField(blank=True, max_length=255, null=True)),
                ('lot_number', models.TextField(blank=True, null=True)),
                ('property_name', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line_1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line_2', models.CharField(blank=True, max_length=255, null=True)),
                ('normalized_address', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=255, null=True)),
                ('building_count', models.IntegerField(blank=True, null=True)),
                ('property_notes', models.TextField(blank=True, null=True)),
                ('property_type', models.TextField(blank=True, null=True)),
                ('year_ending', models.DateField(blank=True, null=True)),
                ('use_description', models.CharField(blank=True, max_length=255, null=True)),
                ('gross_floor_area', models.FloatField(blank=True, null=True)),
                ('year_built', models.IntegerField(blank=True, null=True)),
                ('recent_sale_date', models.DateTimeField(blank=True, null=True)),
                ('conditioned_floor_area', models.FloatField(blank=True, null=True)),
                ('occupied_floor_area', models.FloatField(blank=True, null=True)),
                ('owner', models.CharField(blank=True, max_length=255, null=True)),
                ('owner_email', models.CharField(blank=True, max_length=255, null=True)),
                ('owner_telephone', models.CharField(blank=True, max_length=255, null=True)),
                ('owner_address', models.CharField(blank=True, max_length=255, null=True)),
                ('owner_city_state', models.CharField(blank=True, max_length=255, null=True)),
                ('owner_postal_code', models.CharField(blank=True, max_length=255, null=True)),
                ('energy_score', models.IntegerField(blank=True, null=True)),
                ('site_eui', models.FloatField(blank=True, null=True)),
                ('generation_date', models.DateTimeField(blank=True, null=True)),
                ('release_date', models.DateTimeField(blank=True, null=True)),
                ('source_eui_weather_normalized', models.FloatField(blank=True, null=True)),
                ('site_eui_weather_normalized', models.FloatField(blank=True, null=True)),
                ('source_eui', models.FloatField(blank=True, null=True)),
                ('energy_alerts', models.TextField(blank=True, null=True)),
                ('space_alerts', models.TextField(blank=True, null=True)),
                ('building_certification', models.CharField(blank=True, max_length=255, null=True)),
                ('extra_data', django_pgjson.fields.JsonField(blank=True, default={})),
                ('import_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data_importer.ImportFile')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orgs.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seed.Cycle')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='seed.Property')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seed.PropertyState')),
            ],
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=1000)),
                ('table_name', models.CharField(blank=True, default=b'PropertyState', max_length=200)),
                ('field', models.CharField(max_length=200)),
                ('enabled', models.BooleanField(default=True)),
                ('data_type', models.IntegerField(choices=[(0, b'number'), (1, b'string'), (2, b'date'), (3, b'year')], null=True)),
                ('rule_type', models.IntegerField(choices=[(0, b'default'), (1, b'custom')], null=True)),
                ('required', models.BooleanField(default=False)),
                ('not_null', models.BooleanField(default=False)),
                ('min', models.FloatField(null=True)),
                ('max', models.FloatField(null=True)),
                ('text_match', models.CharField(max_length=200, null=True)),
                ('severity', models.IntegerField(choices=[(0, b'error'), (1, b'warning')], default=0)),
                ('units', models.CharField(blank=True, max_length=100)),
                ('data_quality_check', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='seed.DataQualityCheck')),
            ],
        ),
        migrations.CreateModel(
            name='StatusLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('color', models.CharField(choices=[(b'red', 'red'), (b'blue', 'blue'), (b'light blue', 'light blue'), (b'green', 'green'), (b'white', 'white'), (b'orange', 'orange'), (b'gray', 'gray')], default=b'green', max_length=30, verbose_name='compliance_type')),
                ('super_organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='labels', to='orgs.Organization', verbose_name='SeedOrg')),
            ],
            options={
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='TaxLot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('labels', models.ManyToManyField(to='seed.StatusLabel')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orgs.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='TaxLotAuditLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('import_filename', models.CharField(blank=True, max_length=255, null=True)),
                ('record_type', models.IntegerField(blank=True, choices=[(0, 'ImportFile'), (1, 'UserEdit')], null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orgs.Organization')),
                ('parent1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='taxlotauditlog__parent1', to='seed.TaxLotAuditLog')),
                ('parent2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='taxlotauditlog__parent2', to='seed.TaxLotAuditLog')),
            ],
        ),
        migrations.CreateModel(
            name='TaxLotProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.BooleanField(default=True)),
                ('cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seed.Cycle')),
                ('property_view', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seed.PropertyView')),
            ],
        ),
        migrations.CreateModel(
            name='TaxLotState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence', models.FloatField(blank=True, default=0, null=True)),
                ('data_state', models.IntegerField(choices=[(0, b'Unknown'), (1, b'Post Import'), (2, b'Post Mapping'), (3, b'Post Matching'), (4, b'Flagged for Deletion')], default=0)),
                ('merge_state', models.IntegerField(choices=[(0, b'Unknown'), (1, b'New Record'), (2, b'Merged Record'), (3, b'Duplicate Record'), (4, b'Delete Record')], default=0, null=True)),
                ('custom_id_1', models.CharField(blank=True, max_length=255, null=True)),
                ('jurisdiction_tax_lot_id', models.CharField(blank=True, max_length=2047, null=True)),
                ('block_number', models.CharField(blank=True, max_length=255, null=True)),
                ('district', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line_1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line_2', models.CharField(blank=True, max_length=255, null=True)),
                ('normalized_address', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=255, null=True)),
                ('number_properties', models.IntegerField(blank=True, null=True)),
                ('extra_data', django_pgjson.fields.JsonField(blank=True, default={})),
                ('import_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data_importer.ImportFile')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orgs.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='TaxLotView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seed.Cycle')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seed.TaxLotState')),
                ('taxlot', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='views', to='seed.TaxLot')),
            ],
        ),
        migrations.CreateModel(
            name='TimeSeries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('reading', models.FloatField(null=True)),
                ('cost', models.DecimalField(decimal_places=4, max_digits=11, null=True)),
                ('meter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='timeseries_data', to='seed.Meter')),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_name', models.CharField(max_length=255)),
                ('unit_type', models.IntegerField(choices=[(1, b'String'), (2, b'Decimal'), (3, b'Float'), (4, b'Date'), (5, b'Datetime')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='NonCanonicalProjectBuildings',
            fields=[
                ('projectbuilding', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='seed.ProjectBuilding')),
            ],
        ),
        migrations.AddField(
            model_name='taxlotproperty',
            name='taxlot_view',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seed.TaxLotView'),
        ),
        migrations.AddField(
            model_name='taxlotauditlog',
            name='parent_state1',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='taxlotauditlog__parent_state1', to='seed.TaxLotState'),
        ),
        migrations.AddField(
            model_name='taxlotauditlog',
            name='parent_state2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='taxlotauditlog__parent_state2', to='seed.TaxLotState'),
        ),
        migrations.AddField(
            model_name='taxlotauditlog',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taxlotauditlog__state', to='seed.TaxLotState'),
        ),
        migrations.AddField(
            model_name='taxlotauditlog',
            name='view',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='taxlotauditlog__view', to='seed.TaxLotView'),
        ),
        migrations.AddField(
            model_name='rule',
            name='status_label',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='seed.StatusLabel'),
        ),
        migrations.AddField(
            model_name='propertyauditlog',
            name='parent_state1',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='propertyauditlog__parent_state1', to='seed.PropertyState'),
        ),
        migrations.AddField(
            model_name='propertyauditlog',
            name='parent_state2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='propertyauditlog__parent_state2', to='seed.PropertyState'),
        ),
        migrations.AddField(
            model_name='propertyauditlog',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='propertyauditlog__state', to='seed.PropertyState'),
        ),
        migrations.AddField(
            model_name='propertyauditlog',
            name='view',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='propertyauditlog__view', to='seed.PropertyView'),
        ),
        migrations.AddField(
            model_name='property',
            name='labels',
            field=models.ManyToManyField(to='seed.StatusLabel'),
        ),
        migrations.AddField(
            model_name='property',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orgs.Organization'),
        ),
        migrations.AddField(
            model_name='property',
            name='parent_property',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='seed.Property'),
        ),
        migrations.AddField(
            model_name='projecttaxlotview',
            name='taxlot_view',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_taxlot_views', to='seed.TaxLotView'),
        ),
        migrations.AddField(
            model_name='projectpropertyview',
            name='property_view',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_property_views', to='seed.PropertyView'),
        ),
        migrations.AddField(
            model_name='projectbuilding',
            name='approver',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='projectbuilding',
            name='building_snapshot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_building_snapshots', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='projectbuilding',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_building_snapshots', to='seed.Project'),
        ),
        migrations.AddField(
            model_name='project',
            name='building_snapshots',
            field=models.ManyToManyField(blank=True, through='seed.ProjectBuilding', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='project',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='last_modified_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='project',
            name='property_views',
            field=models.ManyToManyField(blank=True, through='seed.ProjectPropertyView', to='seed.PropertyView'),
        ),
        migrations.AddField(
            model_name='project',
            name='super_organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='orgs.Organization', verbose_name='SeedOrg'),
        ),
        migrations.AddField(
            model_name='project',
            name='taxlot_views',
            field=models.ManyToManyField(blank=True, through='seed.ProjectTaxLotView', to='seed.TaxLotView'),
        ),
        migrations.AddField(
            model_name='enum',
            name='enum_values',
            field=models.ManyToManyField(blank=True, related_name='values', to='seed.EnumValue'),
        ),
        migrations.AddField(
            model_name='compliance',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seed.Project', verbose_name='Project'),
        ),
        migrations.AddField(
            model_name='column',
            name='enum',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='seed.Enum'),
        ),
        migrations.AddField(
            model_name='column',
            name='import_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data_importer.ImportFile'),
        ),
        migrations.AddField(
            model_name='column',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='orgs.Organization'),
        ),
        migrations.AddField(
            model_name='column',
            name='unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='seed.Unit'),
        ),
        migrations.AddField(
            model_name='canonicalbuilding',
            name='labels',
            field=models.ManyToManyField(to='seed.StatusLabel'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='best_guess_canonical_building',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='best_guess', to='seed.CanonicalBuilding'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='block_number_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='building_certification_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='building_count_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='canonical_building',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='seed.CanonicalBuilding'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='canonical_for_ds',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='data_importer.ImportRecord'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='children',
            field=models.ManyToManyField(blank=True, related_name='parents', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='city_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='conditioned_floor_area_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='custom_id_1_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='district_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='duplicate',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='energy_alerts_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='energy_score_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='generation_date_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='gross_floor_area_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='import_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data_importer.ImportFile'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='lot_number_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='occupied_floor_area_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='owner_address_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='owner_city_state_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='owner_email_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='owner_postal_code_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='owner_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='owner_telephone_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='pm_property_id_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='postal_code_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='property_name_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='property_notes_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='recent_sale_date_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='release_date_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='site_eui_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='site_eui_weather_normalized_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='source_eui_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='source_eui_weather_normalized_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='space_alerts_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='state_province_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='super_organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='building_snapshots', to='orgs.Organization'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='tax_lot_id_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='use_description_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='year_built_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingsnapshot',
            name='year_ending_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='buildingattributevariant',
            name='building_snapshot',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='seed.BuildingSnapshot'),
        ),
        migrations.AddField(
            model_name='attributeoption',
            name='building_variant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='options', to='seed.BuildingAttributeVariant'),
        ),
        migrations.AlterUniqueTogether(
            name='taxlotview',
            unique_together=set([('taxlot', 'cycle')]),
        ),
        migrations.AlterUniqueTogether(
            name='taxlotproperty',
            unique_together=set([('property_view', 'taxlot_view')]),
        ),
        migrations.AlterUniqueTogether(
            name='statuslabel',
            unique_together=set([('name', 'super_organization')]),
        ),
        migrations.AlterUniqueTogether(
            name='propertyview',
            unique_together=set([('property', 'cycle')]),
        ),
        migrations.AlterUniqueTogether(
            name='projecttaxlotview',
            unique_together=set([('taxlot_view', 'project')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectpropertyview',
            unique_together=set([('property_view', 'project')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectbuilding',
            unique_together=set([('building_snapshot', 'project')]),
        ),
        migrations.AlterUniqueTogether(
            name='buildingattributevariant',
            unique_together=set([('field_name', 'building_snapshot')]),
        ),
    ]
